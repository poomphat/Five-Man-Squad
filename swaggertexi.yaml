swagger: "2.0"
info:
  # description: "This is a sample server Petstore server.  You can find out more about     Swagger at [http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).      For this sample, you can use the api key `special-key` to test the authorization     filters."
  version: "1.0.0"
  title: "Swagger Texi System"
  termsOfService: "http://swagger.io/terms/"
  contact:
    email: "apiteam@swagger.io"
  license:
    name: "Apache 2.0"
    url: "http://www.apache.org/licenses/LICENSE-2.0.html"
host: "texisystem.swagger.io"
basePath: "/v2"
tags:
- name: "texi"
  description: "Everything about your Pets"
  externalDocs:
    description: "Find out more"
    url: "http://swagger.io"
- name: "store"
  description: "Access to texi orders"
- name: "payment"
  description: "history payment"
- name: "user"
  description: "Operations about user"
  externalDocs:
    description: "Find out more about our store"
    url: "http://swagger.io"
schemes:
- "https"
- "http"
paths:
  /texi:
    post:
      tags:
      - "texi"
      summary: "Add a new texi to the store"
      description: ""
      operationId: "addtexi"
      consumes:
      - "application/json"
      - "application/xml"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "texi object that needs to be added to the store"
        required: true
        schema:
          $ref: "#/definitions/Texi"
      responses:
        "405":
          description: "Invalid input"
      security:
      - texistore_auth:
        - "write:texis"
        - "read:texis"
    put:
      tags:
      - "texi"
      summary: "Update an existing texi"
      description: ""
      operationId: "updatetexi"
      consumes:
      - "application/json"
      - "application/xml"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "texi object that needs to be added to the store"
        required: true
        schema:
          $ref: "#/definitions/Texi"
      responses:
        "400":
          description: "Invalid ID supplied"
        "404":
          description: "texi not found"
        "405":
          description: "Validation exception"
      security:
      - texistore_auth:
        - "write:texis"
        - "read:texis"
  /texi/findByStatus:
    get:
      tags:
      - "texi"
      summary: "Finds texis by status"
      description: "Multiple status values can be provided with comma separated strings"
      operationId: "findtexiByStatus"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "status"
        in: "query"
        description: "Status values that need to be considered for filter"
        required: true
        type: "array"
        items:
          type: "string"
          enum:
          - "available"
          - "Busy"
          default: "available"
        collectionFormat: "multi"
      responses:
        "200":
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Texi"
        "400":
          description: "Invalid status value"
      security:
      - texistore_auth:
        - "write:texis"
        - "read:texis"
        
  /texi/tracking:
    get:
      tags:
      - "texi"
      summary: "Finds texis location"
      description: "show location"
      operationId: "findtexilocation"
      produces:
      - "application/xml"
      - "application/json"
      
      
      parameters:
      - name: "tracking"
        in: "query"
        description: "show car location"
        required: true
        type: "string"
        
        
      responses:
        "200":
          description: "successful operation"
          schema:
            type: "string"
            items:
              $ref: "#/definitions/Texi"
        "400":
          description: "Invalid status value"
      security:
      - texistore_auth:
        - "write:texis"
        - "read:texis"
        
        
  # /texi/findByTags:
  #   get:
  #     tags:
  #     - "texi"
  #     summary: "Finds texis by tags"
  #     description: "Muliple tags can be provided with comma separated strings. Use         tag1, tag2, tag3 for testing."
  #     operationId: "findPetsByTags"
  #     produces:
  #     - "application/xml"
  #     - "application/json"
  #     parameters:
  #     - name: "tags"
  #       in: "query"
  #       description: "Tags to filter by"
  #       required: true
  #       type: "array"
  #       items:
  #         type: "string"
  #       collectionFormat: "multi"
  #     responses:
  #       "200":
  #         description: "successful operation"
  #         schema:
  #           type: "array"
  #           items:
  #             $ref: "#/definitions/Texi"
  #       "400":
  #         description: "Invalid tag value"
  #     security:
  #     - texistore_auth:
  #       - "write:texis"
  #       - "read:texis"
  #     deprecated: true
  /texi/{texiId}:
    get:
      tags:
      - "texi"
      summary: "Find texi by ID"
      description: "Returns a single texi"
      operationId: "gettexiById"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "texiId"
        in: "path"
        description: "ID of texi to return"
        required: true
        type: "integer"
        format: "int64"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/Texi"
        "400":
          description: "Invalid ID supplied"
        "404":
          description: "Texi not found"
      security:
      - api_key: []
    post:
      tags:
      - "texi"
      summary: "Updates a texi in the store with form data"
      description: ""
      operationId: "updatetexiWithForm"
      consumes:
      - "application/x-www-form-urlencoded"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "texiId"
        in: "path"
        description: "ID of texithat needs to be updated"
        required: true
        type: "integer"
        format: "int64"
      - name: "name"
        in: "formData"
        description: "Updated name of the texi"
        required: false
        type: "string"
      - name: "status"
        in: "formData"
        description: "Updated status of the texi"
        required: false
        type: "string"
      responses:
        "405":
          description: "Invalid input"
      security:
      - texistore_auth:
        - "write:texis"
        - "read:texis"
    delete:
      tags:
      - "texi"
      summary: "Deletes a texi"
      description: ""
      operationId: "delete texi"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "api_key"
        in: "header"
        required: false
        type: "string"
      - name: "texiId"
        in: "path"
        description: "texi id to delete"
        required: true
        type: "integer"
        format: "int64"
      responses:
        "400":
          description: "Invalid ID supplied"
        "404":
          description: "Pet not found"
      security:
      - texistore_auth:
        - "write:texis"
        - "read:texis"
  /texi/{texiId}/uploadImage:
    post:
      tags:
      - "texi"
      summary: "uploads an image"
      description: ""
      operationId: "uploadFile"
      consumes:
      - "multipart/form-data"
      produces:
      - "application/json"
      parameters:
      - name: "texiId"
        in: "path"
        description: "ID of texi to update"
        required: true
        type: "integer"
        format: "int64"
      - name: "additionalMetadata"
        in: "formData"
        description: "Additional data to pass to server"
        required: false
        type: "string"
      - name: "file"
        in: "formData"
        description: "file to upload"
        required: false
        type: "file"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/ApiResponse"
      security:
      - texistore_auth:
        - "write:texis"
        - "read:texis"
  # /taxi/{texiId}/rating:
  #   post:
  #     tags:
  #     - "texi"
  #     summary: 
  #     description: 
  #     responses:
  #       200:
  #         description: OK
    
  /payment/order:
    get:
      tags:
      - "payment"
      summary: "history payment"
      description: "show history"
      operationId: "showpayment"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "order placed for purchasing the pet"
        required: true
        schema:
          $ref: "#/definitions/payment"
      responses:
        200:
          description: OK
    put:
      tags: 
      - "payment"
      summary: "update payment"
      description: ""
      operationId: "updatepayment"
      consumes:
      - "application/json"
      - "application/xml"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "show payment"
        required: true
        schema:
          $ref: "#/definitions/payment"
      responses:
        "400":
          description: "Invalid ID supplied"
        "404":
          description: "Pet not found"
        "405":
          description: "Validation exception"
      security:
      - texistore_auth:
        - "write:texis"
        - "read:texis"
    
  /store/statecar:
    get:
      tags:
      - "store"
      summary: "สถานะของรถ"
      description: "Returns a map of status codes to quantities"
      operationId: "getStatetexi"
      produces:
      - "application/json"
      parameters: []
      responses:
        "200":
          description: "successful operation"
          schema:
            type: "object"
            additionalProperties:
              type: "integer"
              format: "int32"
      security:
      - api_key: []
  /store/order:
    post:
      tags:
      - "store"
      summary: "คิวเรียกรถ"
      description: ""
      operationId: "getOrder"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "order placed for purchasing the pet"
        required: true
        schema:
          $ref: "#/definitions/Order"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/Order"
        "400":
          description: "Invalid Order"
  /store/order/{orderId}:
    get:
      tags:
      - "store"
      summary: "ค้นห้า IDที่เรียกรถ"
      description: ""
      operationId: "getOrderById"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "orderId"
        in: "path"
        description: "ID of Text that needs to be fetched"
        required: true
        type: "integer"
        maximum: 10.0
        minimum: 1.0
        format: "int64"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/Order"
        "400":
          description: "Invalid ID supplied"
        "404":
          description: "Order not found"
    delete:
      tags:
      - "store"
      summary: "Delete คิว by ID"
      description: "For valid response try integer IDs with positive integer value.         Negative or non-integer values will generate API errors"
      operationId: "deleteOrder"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "orderId"
        in: "path"
        description: "ID of the order that needs to be deleted"
        required: true
        type: "integer"
        minimum: 1.0
        format: "int64"
      responses:
        "400":
          description: "Invalid ID supplied"
        "404":
          description: "Order not found"
  /user:
    post:
      tags:
      - "user"
      summary: "Create user"
      description: "This can only be done by the logged in user."
      operationId: "createUser"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Created user object"
        required: true
        schema:
          $ref: "#/definitions/User"
      responses:
        default:
          description: "successful operation"
  /user/createWithArray:
    post:
      tags:
      - "user"
      summary: "Creates list of users with given input array"
      description: ""
      operationId: "createUsersWithArrayInput"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "List of user object"
        required: true
        schema:
          type: "array"
          items:
            $ref: "#/definitions/User"
      responses:
        default:
          description: "successful operation"
  /user/createWithList:
    post:
      tags:
      - "user"
      summary: "Creates list of users with given input array"
      description: ""
      operationId: "createUsersWithListInput"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "List of user object"
        required: true
        schema:
          type: "array"
          items:
            $ref: "#/definitions/User"
      responses:
        default:
          description: "successful operation"
  /user/login:
    get:
      tags:
      - "user"
      summary: "Logs user into the system"
      description: ""
      operationId: "loginUser"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "username"
        in: "query"
        description: "The user name for login"
        required: true
        type: "string"
      - name: "password"
        in: "query"
        description: "The password for login in clear text"
        required: true
        type: "string"
      responses:
        "200":
          description: "successful operation"
          schema:
            type: "string"
          headers:
            X-Rate-Limit:
              type: "integer"
              format: "int32"
              description: "calls per hour allowed by the user"
            X-Expires-After:
              type: "string"
              format: "date-time"
              description: "date in UTC when token expires"
        "400":
          description: "Invalid username/password supplied"
  /user/logout:
    get:
      tags:
      - "user"
      summary: "Logs out current logged in user session"
      description: ""
      operationId: "logoutUser"
      produces:
      - "application/xml"
      - "application/json"
      parameters: []
      responses:
        default:
          description: "successful operation"
  /user/{username}:
    get:
      tags:
      - "user"
      summary: "Get user by user name"
      description: ""
      operationId: "getUserByName"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "username"
        in: "path"
        description: "The name that needs to be fetched. Use user1 for testing. "
        required: true
        type: "string"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/User"
        "400":
          description: "Invalid username supplied"
        "404":
          description: "User not found"
    put:
      tags:
      - "user"
      summary: "Updated user"
      description: "This can only be done by the logged in user."
      operationId: "updateUser"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "username"
        in: "path"
        description: "name that need to be updated"
        required: true
        type: "string"
      - in: "body"
        name: "body"
        description: "Updated user object"
        required: true
        schema:
          $ref: "#/definitions/User"
      responses:
        "400":
          description: "Invalid user supplied"
        "404":
          description: "User not found"
    delete:
      tags:
      - "user"
      summary: "Delete user"
      description: "This can only be done by the logged in user."
      operationId: "deleteUser"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "username"
        in: "path"
        description: "The name that needs to be deleted"
        required: true
        type: "string"
      responses:
        "400":
          description: "Invalid username supplied"
        "404":
          description: "User not found"
securityDefinitions:
  texistore_auth:
    type: "oauth2"
    authorizationUrl: "http://texistore.swagger.io/oauth/dialog"
    flow: "implicit"
    scopes:
      write:texis: "modify texi in your account"
      read:texis: "read your texi"
  api_key:
    type: "apiKey"
    name: "api_key"
    in: "header"
definitions:
  Order:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      texiId:
        type: "integer"
        format: "int64"
      rating:
        type: "string"
      status:
        type: "string"
        description: "Order Status"
        enum:
        - "wait"
        - "going"
      complete:
        type: "boolean"
        default: false
    xml:
      name: "Order"
  Category:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      name:
        type: "string"
    xml:
      name: "Category"
  payment:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      cost:
        type: "integer"
        format: "int64"
      texiId:
        type: "integer"
        format: "int64"
      userId:
        type: "integer"
        format: "int64"
      statuspay:
        type: "string"
      targetlocation:
        type: "string"
        description: "pay Status"
        enum:
        - "wait"
        - "complete"
      feedback:
        type: "string"
    xml:
      name: "payment"
  User:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      username:
        type: "string"
      firstName:
        type: "string"
      lastName:
        type: "string"
      email:
        type: "string"
      password:
        type: "string"
      phone:
        type: "string"
      userStatus:
        type: "integer"
        format: "int32"
        description: "User Status"
    xml:
      name: "User"
  Tag:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      name:
        type: "string"
    xml:
      name: "Tag"
  Texi:
    type: "object"
    required:
    - "name"
    - "photoUrls"
    properties:
      id:
        type: "integer"
        format: "int64"
      category:
        $ref: "#/definitions/Category"
      location:
        type: "string"
        format: "location"
      name:
        type: "string"
        example: "doggie"
      photoUrls:
        type: "array"
        xml:
          name: "photoUrl"
          wrapped: true
        items:
          type: "string"
      tags:
        type: "array"
        xml:
          name: "tag"
          wrapped: true
        items:
          $ref: "#/definitions/Tag"
      status:
        type: "string"
        description: "texi status in the store"
        enum:
        - "available"
        - "Busy"
        
    xml:
      name: "Pet"
  ApiResponse:
    type: "object"
    properties:
      code:
        type: "integer"
        format: "int32"
      type:
        type: "string"
      message:
        type: "string"
externalDocs:
  description: "Find out more about Swagger"
  url: "http://swagger.io"